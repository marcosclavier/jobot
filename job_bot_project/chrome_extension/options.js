document.addEventListener('DOMContentLoaded', () => {
    const loginButton = document.getElementById('login');
    const status = document.getElementById('status');

    // Function to handle the OAuth2 flow
    function authenticate() {
        // --- Configuration ---
        // Replace with your actual backend's authorization endpoint
        const YOUR_AUTHORIZATION_URL = 'http://127.0.0.1:8000/api/oauth2/authorize';
        // The Client ID for a Chrome Extension is its own ID
        const YOUR_CLIENT_ID = chrome.runtime.id;
        // The redirect URI is automatically generated by Chrome
        const redirectUri = chrome.identity.getRedirectURL();

        // Construct the authorization URL
        // We are using the 'token' response type for the implicit flow
        let authUrl = `${YOUR_AUTHORIZATION_URL}?client_id=${YOUR_CLIENT_ID}&redirect_uri=${encodeURIComponent(redirectUri)}&response_type=token`;

        status.textContent = 'Attempting to log in...';

        // Launch the web authentication flow
        chrome.identity.launchWebAuthFlow({
            url: authUrl,
            interactive: true // This will prompt the user to log in if necessary
        }, (redirect_url) => {
            // Handle the response
            if (chrome.runtime.lastError || !redirect_url) {
                status.textContent = 'Authentication failed: ' + (chrome.runtime.lastError ? chrome.runtime.lastError.message : "The user cancelled or a problem occurred.");
                return;
            }

            // The access token is returned in the URL fragment (#)
            const url = new URL(redirect_url);
            // Create a URLSearchParams object from the hash part of the URL
            const params = new URLSearchParams(url.hash.substring(1));
            const accessToken = params.get('access_token');

            if (accessToken) {
                // Save the token to storage
                chrome.storage.local.set({ 'authToken': accessToken }, () => {
                    status.textContent = 'Successfully authenticated! You can now close this page.';
                    loginButton.disabled = true;
                    loginButton.textContent = 'Logged In';
                });
            } else {
                status.textContent = 'Authentication failed: Could not extract the access token from the redirect.';
            }
        });
    }

    // Check if a token already exists when the page loads
    chrome.storage.local.get(['authToken'], (result) => {
        if (result.authToken) {
            status.textContent = 'You are already logged in.';
            loginButton.disabled = true;
            loginButton.textContent = 'Logged In';
        }
    });

    // Add click listener to the login button
    loginButton.addEventListener('click', authenticate);
});
